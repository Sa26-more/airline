{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-dev-more"
		},
		"ls_azure_sql_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_azure_sql'"
		},
		"ls_blob_storage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_blob_storage'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_datamarts')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_datamart",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_datamart",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCosmetic": {},
									"sinkBody": {},
									"sinkSkinCare": {},
									"sinkHair": {},
									"sinkLips": {},
									"sinkOther": {},
									"sinkEyes": {},
									"sinkFace": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_datamart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_e_commerce_etl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_etl",
						"description": "Cleaning the data and saving good data into Cosmetic table and bad data into cosmetic_dump table. Also create a data marts for each category.",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_etl",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCosmetic": {},
									"cosmeticSink": {},
									"cosmeticDumpSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_etl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_body_sink_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "BODY"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cosmetic_dump_sink_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "product_name",
						"type": "varchar"
					},
					{
						"name": "website",
						"type": "varchar"
					},
					{
						"name": "country",
						"type": "varchar"
					},
					{
						"name": "category",
						"type": "varchar"
					},
					{
						"name": "subcategory",
						"type": "varchar"
					},
					{
						"name": "title_href",
						"type": "varchar"
					},
					{
						"name": "price",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "brand",
						"type": "varchar"
					},
					{
						"name": "ingredients",
						"type": "varchar"
					},
					{
						"name": "form",
						"type": "varchar"
					},
					{
						"name": "type",
						"type": "varchar"
					},
					{
						"name": "color",
						"type": "varchar"
					},
					{
						"name": "size",
						"type": "int",
						"precision": 10
					},
					{
						"name": "rating",
						"type": "varchar"
					},
					{
						"name": "noofratings",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "COSMETIC_DUMP"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cosmetic_sink_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "product_name",
						"type": "varchar"
					},
					{
						"name": "website",
						"type": "varchar"
					},
					{
						"name": "country",
						"type": "varchar"
					},
					{
						"name": "category",
						"type": "varchar"
					},
					{
						"name": "subcategory",
						"type": "varchar"
					},
					{
						"name": "title_href",
						"type": "varchar"
					},
					{
						"name": "price",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "brand",
						"type": "varchar"
					},
					{
						"name": "ingredients",
						"type": "varchar"
					},
					{
						"name": "form",
						"type": "varchar"
					},
					{
						"name": "type",
						"type": "varchar"
					},
					{
						"name": "color",
						"type": "varchar"
					},
					{
						"name": "size",
						"type": "int",
						"precision": 10
					},
					{
						"name": "rating",
						"type": "varchar"
					},
					{
						"name": "noofratings",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "COSMETIC"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_eyes_sink_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "EYES"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_face_sink_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "FACE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_hair_sink_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "HAIR"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_lips_sink_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "LIPS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_other_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "adf-practice"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "airline_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "alias",
						"type": "String"
					},
					{
						"name": "iata",
						"type": "String"
					},
					{
						"name": "icao",
						"type": "String"
					},
					{
						"name": "callsign",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "active",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_skin_care_sink_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "SKIN_CARE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "E-commerce  cosmetic dataset.csv",
						"folderPath": "input",
						"container": "adf-practice"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "product_name",
						"type": "String"
					},
					{
						"name": "website",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "category",
						"type": "String"
					},
					{
						"name": "subcategory",
						"type": "String"
					},
					{
						"name": "title_href",
						"type": "String"
					},
					{
						"name": "price",
						"type": "String"
					},
					{
						"name": "brand",
						"type": "String"
					},
					{
						"name": "ingredients",
						"type": "String"
					},
					{
						"name": "form",
						"type": "String"
					},
					{
						"name": "type",
						"type": "String"
					},
					{
						"name": "color",
						"type": "String"
					},
					{
						"name": "size",
						"type": "String"
					},
					{
						"name": "rating",
						"type": "String"
					},
					{
						"name": "noofratings",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_cosmetic_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "product_name",
						"type": "varchar"
					},
					{
						"name": "website",
						"type": "varchar"
					},
					{
						"name": "country",
						"type": "varchar"
					},
					{
						"name": "category",
						"type": "varchar"
					},
					{
						"name": "subcategory",
						"type": "varchar"
					},
					{
						"name": "title_href",
						"type": "varchar"
					},
					{
						"name": "price",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "brand",
						"type": "varchar"
					},
					{
						"name": "ingredients",
						"type": "varchar"
					},
					{
						"name": "form",
						"type": "varchar"
					},
					{
						"name": "type",
						"type": "varchar"
					},
					{
						"name": "color",
						"type": "varchar"
					},
					{
						"name": "size",
						"type": "int",
						"precision": 10
					},
					{
						"name": "rating",
						"type": "varchar"
					},
					{
						"name": "noofratings",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "COSMETIC"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_azure_sql_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_blob_storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_blob_storage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_datamart')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_source_cosmetic_azure_sql",
								"type": "DatasetReference"
							},
							"name": "sourceCosmetic"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_body_sink_azure_sql",
								"type": "DatasetReference"
							},
							"name": "sinkBody"
						},
						{
							"dataset": {
								"referenceName": "ds_skin_care_sink_azure_sql",
								"type": "DatasetReference"
							},
							"name": "sinkSkinCare"
						},
						{
							"dataset": {
								"referenceName": "ds_hair_sink_azure_sql",
								"type": "DatasetReference"
							},
							"name": "sinkHair"
						},
						{
							"dataset": {
								"referenceName": "ds_lips_sink_azure_sql",
								"type": "DatasetReference"
							},
							"name": "sinkLips"
						},
						{
							"dataset": {
								"referenceName": "ds_other_sink",
								"type": "DatasetReference"
							},
							"name": "sinkOther"
						},
						{
							"dataset": {
								"referenceName": "ds_eyes_sink_azure_sql",
								"type": "DatasetReference"
							},
							"name": "sinkEyes"
						},
						{
							"dataset": {
								"referenceName": "ds_face_sink_azure_sql",
								"type": "DatasetReference"
							},
							"name": "sinkFace"
						}
					],
					"transformations": [
						{
							"name": "splitSubcategory"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "alterRow3"
						},
						{
							"name": "alterRow4"
						},
						{
							"name": "filterEyes"
						},
						{
							"name": "filterFace"
						}
					],
					"scriptLines": [
						"source(output(",
						"          product_name as string,",
						"          website as string,",
						"          country as string,",
						"          category as string,",
						"          subcategory as string,",
						"          title_href as string,",
						"          price as decimal(18,0),",
						"          brand as string,",
						"          ingredients as string,",
						"          form as string,",
						"          type as string,",
						"          color as string,",
						"          size as integer,",
						"          rating as string,",
						"          noofratings as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceCosmetic",
						"sourceCosmetic split(like(category, 'body%'),",
						"     like(category, 'skin%'),",
						"     like(category, 'hair%'),",
						"     like(category, 'lips%'),",
						"     disjoint: false) ~> splitSubcategory@(body, skincare, hair, lips, other)",
						"splitSubcategory@body alterRow(updateIf(true())) ~> alterRow1",
						"splitSubcategory@skincare alterRow(updateIf(true())) ~> alterRow2",
						"splitSubcategory@hair alterRow(updateIf(true())) ~> alterRow3",
						"splitSubcategory@lips alterRow(updateIf(true())) ~> alterRow4",
						"sourceCosmetic filter(like(trim(toString(subcategory)), 'eye%') || like(trim(toString(subcategory)), 'mascara%') || like(trim(toString(subcategory)), 'serum%')) ~> filterEyes",
						"sourceCosmetic filter(regexMatch(subcategory, 'blush,concealer') || regexMatch(subcategory,'eye treatment') || regexMatch(subcategory,'face oil') || regexMatch(subcategory,'foundation') || regexMatch(subcategory,'highlighter') || regexMatch(subcategory, 'powder') || regexMatch(subcategory,'primer')) ~> filterFace",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['SELECT COUNT(*) FROM dbo.BODY;'],",
						"     postSQLs:['SELECT COUNT(*) FROM dbo.BODY;'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkBody",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['SELECT COUNT(*) FROM dbo.SKIN_CARE;'],",
						"     postSQLs:['SELECT COUNT(*) FROM dbo.SKIN_CARE;'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkSkinCare",
						"alterRow3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['SELECT COUNT(*) FROM dbo.HAIR;'],",
						"     postSQLs:['SELECT COUNT(*) FROM dbo.HAIR;'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkHair",
						"alterRow4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['SELECT COUNT(*) FROM dbo.LIPS;'],",
						"     postSQLs:['SELECT COUNT(*) FROM dbo.LIPS;'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkLips",
						"splitSubcategory@other sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          airline_id as string,",
						"          name as string,",
						"          alias as string,",
						"          iata as string,",
						"          icao as string,",
						"          callsign as string,",
						"          country as string,",
						"          active as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkOther",
						"filterEyes sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkEyes",
						"filterFace sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkFace"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_cosmetic_azure_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_body_sink_azure_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_skin_care_sink_azure_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_hair_sink_azure_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_lips_sink_azure_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_other_sink')]",
				"[concat(variables('factoryId'), '/datasets/ds_eyes_sink_azure_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_face_sink_azure_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_etl')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_source",
								"type": "DatasetReference"
							},
							"name": "sourceCosmetic"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_cosmetic_sink_azure_sql",
								"type": "DatasetReference"
							},
							"name": "cosmeticSink"
						},
						{
							"dataset": {
								"referenceName": "ds_cosmetic_dump_sink_azure_sql",
								"type": "DatasetReference"
							},
							"name": "cosmeticDumpSink"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          product_name as string,",
						"          website as string,",
						"          country as string,",
						"          category as string,",
						"          subcategory as string,",
						"          title_href as string,",
						"          price as string,",
						"          brand as string,",
						"          ingredients as string,",
						"          form as string,",
						"          type as string,",
						"          color as string,",
						"          size as string,",
						"          rating as string,",
						"          noofratings as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceCosmetic",
						"sourceCosmetic split(not(isNull(product_name) || isNull(website) || isNull(country) || isNull(category) || isNull(subcategory) || isNull(title_href) || isNull(price) || isNull(brand) || isNull(ingredients) || isNull(form) || isNull(rating) || isNull(noofratings)),",
						"     disjoint: false) ~> split1@(Cosmetic, CosmeticDump)",
						"split1@Cosmetic sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          product_name as string,",
						"          website as string,",
						"          country as string,",
						"          category as string,",
						"          subcategory as string,",
						"          title_href as string,",
						"          price as decimal(18,0),",
						"          brand as string,",
						"          ingredients as string,",
						"          form as string,",
						"          type as string,",
						"          color as string,",
						"          size as integer,",
						"          rating as string,",
						"          noofratings as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> cosmeticSink",
						"split1@CosmeticDump sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          product_name as string,",
						"          website as string,",
						"          country as string,",
						"          category as string,",
						"          subcategory as string,",
						"          title_href as string,",
						"          price as decimal(18,0),",
						"          brand as string,",
						"          ingredients as string,",
						"          form as string,",
						"          type as string,",
						"          color as string,",
						"          size as integer,",
						"          rating as string,",
						"          noofratings as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> cosmeticDumpSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source')]",
				"[concat(variables('factoryId'), '/datasets/ds_cosmetic_sink_azure_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_cosmetic_dump_sink_azure_sql')]"
			]
		}
	]
}