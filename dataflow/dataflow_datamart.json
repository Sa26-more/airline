{
	"name": "dataflow_datamart",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source_cosmetic_azure_sql",
						"type": "DatasetReference"
					},
					"name": "sourceCosmetic"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_body_sink_azure_sql",
						"type": "DatasetReference"
					},
					"name": "sinkBody"
				},
				{
					"dataset": {
						"referenceName": "ds_skin_care_sink_azure_sql",
						"type": "DatasetReference"
					},
					"name": "sinkSkinCare"
				},
				{
					"dataset": {
						"referenceName": "ds_hair_sink_azure_sql",
						"type": "DatasetReference"
					},
					"name": "sinkHair"
				},
				{
					"dataset": {
						"referenceName": "ds_lips_sink_azure_sql",
						"type": "DatasetReference"
					},
					"name": "sinkLips"
				},
				{
					"dataset": {
						"referenceName": "ds_other_sink",
						"type": "DatasetReference"
					},
					"name": "sinkOther"
				},
				{
					"dataset": {
						"referenceName": "ds_eyes_sink_azure_sql",
						"type": "DatasetReference"
					},
					"name": "sinkEyes"
				},
				{
					"dataset": {
						"referenceName": "ds_face_sink_azure_sql",
						"type": "DatasetReference"
					},
					"name": "sinkFace"
				}
			],
			"transformations": [
				{
					"name": "splitSubcategory"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "alterRow2"
				},
				{
					"name": "alterRow3"
				},
				{
					"name": "alterRow4"
				},
				{
					"name": "filterEyes"
				},
				{
					"name": "filterFace"
				}
			],
			"scriptLines": [
				"source(output(",
				"          product_name as string,",
				"          website as string,",
				"          country as string,",
				"          category as string,",
				"          subcategory as string,",
				"          title_href as string,",
				"          price as decimal(18,0),",
				"          brand as string,",
				"          ingredients as string,",
				"          form as string,",
				"          type as string,",
				"          color as string,",
				"          size as integer,",
				"          rating as string,",
				"          noofratings as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceCosmetic",
				"sourceCosmetic split(like(category, 'body%'),",
				"     like(category, 'skin%'),",
				"     like(category, 'hair%'),",
				"     like(category, 'lips%'),",
				"     disjoint: false) ~> splitSubcategory@(body, skincare, hair, lips, other)",
				"splitSubcategory@body alterRow(updateIf(true())) ~> alterRow1",
				"splitSubcategory@skincare alterRow(updateIf(true())) ~> alterRow2",
				"splitSubcategory@hair alterRow(updateIf(true())) ~> alterRow3",
				"splitSubcategory@lips alterRow(updateIf(true())) ~> alterRow4",
				"sourceCosmetic filter(like(trim(toString(subcategory)), 'eye%') || like(trim(toString(subcategory)), 'mascara%') || like(trim(toString(subcategory)), 'serum%')) ~> filterEyes",
				"sourceCosmetic filter(regexMatch(subcategory, 'blush,concealer') || regexMatch(subcategory,'eye treatment') || regexMatch(subcategory,'face oil') || regexMatch(subcategory,'foundation') || regexMatch(subcategory,'highlighter') || regexMatch(subcategory, 'powder') || regexMatch(subcategory,'primer')) ~> filterFace",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['SELECT COUNT(*) FROM dbo.BODY;'],",
				"     postSQLs:['SELECT COUNT(*) FROM dbo.BODY;'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkBody",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['SELECT COUNT(*) FROM dbo.SKIN_CARE;'],",
				"     postSQLs:['SELECT COUNT(*) FROM dbo.SKIN_CARE;'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkSkinCare",
				"alterRow3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['SELECT COUNT(*) FROM dbo.HAIR;'],",
				"     postSQLs:['SELECT COUNT(*) FROM dbo.HAIR;'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkHair",
				"alterRow4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['SELECT COUNT(*) FROM dbo.LIPS;'],",
				"     postSQLs:['SELECT COUNT(*) FROM dbo.LIPS;'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkLips",
				"splitSubcategory@other sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          airline_id as string,",
				"          name as string,",
				"          alias as string,",
				"          iata as string,",
				"          icao as string,",
				"          callsign as string,",
				"          country as string,",
				"          active as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkOther",
				"filterEyes sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkEyes",
				"filterFace sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkFace"
			]
		}
	}
}