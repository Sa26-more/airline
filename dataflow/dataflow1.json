{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source",
						"type": "DatasetReference"
					},
					"name": "dfSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sink",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "ls_blob_storage",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          airline_id as string,",
				"          name as string,",
				"          alias as string,",
				"          iata as string,",
				"          icao as string,",
				"          callsign as string,",
				"          country as string,",
				"          active as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dfSource",
				"dfSource derive(name_new = iif(regexMatch(name, '[0-9]'), 1, 0)) ~> derivedColumn1",
				"derivedColumn1 filter(toInteger(airline_id) >= 0 && isNull(airline_id) != true() && isNull(name) != true() && isNull(iata) != true() && isNull(icao) != true() && iata != '-' && icao != 'N/A' && length(iata) == 2 && length(icao) == 3 && rlike(iata,'[a-zA-Z]') && rlike(icao,'[a-zA-Z]') && name_new != 1) ~> filter1",
				"filter1 select(mapColumn(",
				"          airline_id,",
				"          name,",
				"          alias,",
				"          iata,",
				"          icao,",
				"          callsign,",
				"          country,",
				"          active",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['airline.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}